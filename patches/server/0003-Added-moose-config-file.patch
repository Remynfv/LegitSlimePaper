From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PolishKrowa <45701824+Mrredstone5230@users.noreply.github.com>
Date: Fri, 19 Jul 2024 22:27:30 -0400
Subject: [PATCH] Added moose config file


diff --git a/src/main/java/com/legitimoose/lsp/MooseConfig.java b/src/main/java/com/legitimoose/lsp/MooseConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..3730c2f902dd23a97df4d5d3b3cc57cf8cb13ef1
--- /dev/null
+++ b/src/main/java/com/legitimoose/lsp/MooseConfig.java
@@ -0,0 +1,117 @@
+package com.legitimoose.lsp;
+
+import com.google.common.base.Throwables;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+// INSPIRED BY org.spigotmc.SpigotConfig
+// This file uses Standard logging since this is used even before Bukkit's logger gets created.
+public class MooseConfig {
+
+    private static File CONFIG_FILE;
+    private static final String HEADER = """
+            This is the main config of LegitSlimePaper.\
+            
+            Note that for the allowed-extra-commands-in-cmd-blocks, you need to manually put command aliases for them to work.
+            """;
+    public static YamlConfiguration config;
+
+    public static void init(File configFile) {
+        MooseConfig.CONFIG_FILE = configFile;
+        MooseConfig.config = new YamlConfiguration();
+        try {
+            MooseConfig.config.load(MooseConfig.CONFIG_FILE);
+        } catch (IOException ex) {
+        } catch (InvalidConfigurationException ex) {
+            System.err.println("Could not load moose.yml, please correct your syntax errors");
+            throw Throwables.propagate(ex);
+        }
+
+        MooseConfig.config.options().header(MooseConfig.HEADER);
+        MooseConfig.config.options().copyDefaults(true);
+
+        MooseConfig.readConfig(MooseConfig.class, null);
+    }
+
+    public static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        System.err.println("Error invoking " + method);
+                        ex.printStackTrace();
+                    }
+                }
+            }
+        }
+        MooseConfig.save();
+    }
+
+    public static void save() {
+        try {
+            MooseConfig.config.save(MooseConfig.CONFIG_FILE);
+        } catch (IOException ex) {
+            System.err.println("Could not save moose.yml, please correct your syntax errors");
+            ex.printStackTrace();
+        }
+    }
+
+    private static void set(String path, Object val) {
+        MooseConfig.config.set(path, val);
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        MooseConfig.config.addDefault(path, def);
+        return MooseConfig.config.getBoolean(path, MooseConfig.config.getBoolean(path));
+    }
+
+    private static int getInt(String path, int def) {
+        MooseConfig.config.addDefault(path, def);
+        return MooseConfig.config.getInt(path, MooseConfig.config.getInt(path));
+    }
+
+    private static <T> List getList(String path, T def) {
+        MooseConfig.config.addDefault(path, def);
+        return (List<T>) MooseConfig.config.getList(path, MooseConfig.config.getList(path));
+    }
+
+    private static String getString(String path, String def) {
+        MooseConfig.config.addDefault(path, def);
+        return MooseConfig.config.getString(path, MooseConfig.config.getString(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        MooseConfig.config.addDefault(path, def);
+        return MooseConfig.config.getDouble(path, MooseConfig.config.getDouble(path));
+    }
+//    ========================================================================
+
+
+    public static List<String> blacklistedVanillaCommands = new ArrayList<>();
+    private static void blacklistedVanillaCommands() {
+        MooseConfig.blacklistedVanillaCommands = MooseConfig.getList("blacklisted-vanilla-commands-in-cmd-blocks", List.of(
+                "stop", "kick", "op", "deop", "ban", "ban-ip", "pardon", "pardon-ip", "reload", "jfr", "debug", "whitelist", "perf", "save-all", "save-on", "save-off", "setidletimeout"
+        ));
+    }
+
+    public static List<String> allowedExtraCommands = new ArrayList<>();
+    private static void allowedExtraCommands() {
+        MooseConfig.allowedExtraCommands = MooseConfig.getList("allowed-extra-commands-in-cmd-blocks", List.of(
+
+        ));
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 5443013060b62e3bfcc51cddca96d1c0bc59fe72..33a21880b0ac547f804202f38ba124e97f6d4c4b 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import com.legitimoose.lsp.MooseConfig; // Moose
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
@@ -153,6 +154,9 @@ public class Main {
                 return;
             }
 
+            MooseConfig.init((File) optionset.valueOf("moose-settings")); // Moose - Load moose.yml
+
+
             // Spigot Start
             boolean eulaAgreed = Boolean.getBoolean( "com.mojang.eula.agree" );
             if ( eulaAgreed )
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index e02102280ed1dc300191d19bbca8f00e17701753..e0525746be95f7eced1e83c8da54c4886a383986 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -183,6 +183,14 @@ public class Main {
                         .defaultsTo("Unknown Server")
                         .describedAs("Name");
                 // Paper end
+
+                // Moose start
+                acceptsAll(Main.asList("M", "moose-settings"), "File for moose settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("moose.yml"))
+                        .describedAs("Yml file");
+                // Moose end
             }
         };
 
