From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Legitimoose <legitimoose@gmail.com>
Date: Wed, 17 Jan 2024 17:50:08 -0800
Subject: [PATCH] Prevent custom commands in command blocks

Add a new commandBlockAllowed boolean to command nodes. This is set when commands are first registered. Currently no way
to set this later on.
When server commands are dispatched, check if running in a command block,
and if it's not vanilla, act like it's not a valid command.

diff --git a/src/main/java/com/mojang/brigadier/tree/CommandNode.java b/src/main/java/com/mojang/brigadier/tree/CommandNode.java
index dc76fcf4c6cc6cd65ce117b1855c15ede60f30ab..06b0403caa3a4a826619ace4211405b4c3b9200d 100644
--- a/src/main/java/com/mojang/brigadier/tree/CommandNode.java
+++ b/src/main/java/com/mojang/brigadier/tree/CommandNode.java
@@ -44,6 +44,7 @@ public abstract class CommandNode<S> implements Comparable<CommandNode<S>> {
         this.arguments.remove(name);
     }
     // CraftBukkit end
+    public Boolean commandBlockAllowed = false; // Moose
 
     protected CommandNode(final Command<S> command, final Predicate<S> requirement, final CommandNode<S> redirect, final RedirectModifier<S> modifier, final boolean forks) {
         this.command = command;
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index 260350422fc724ba5cd5769cbb387b6007f36a84..d1c2e1ea0aca8d455e5b784e593dfac1b5307918 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -1,6 +1,7 @@
 package net.minecraft.commands;
 
 import com.google.common.collect.Maps;
+import com.legitimoose.lsp.MooseConfig; // Moose
 import com.mojang.brigadier.ParseResults;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.arguments.ArgumentType;
@@ -72,6 +73,7 @@ import net.minecraft.server.commands.ForceLoadCommand;
 import net.minecraft.server.commands.FunctionCommand;
 import net.minecraft.server.commands.GameModeCommand;
 import net.minecraft.server.commands.GameRuleCommand;
+import net.minecraft.world.level.BaseCommandBlock;
 import net.minecraft.server.commands.GiveCommand;
 import net.minecraft.server.commands.HelpCommand;
 import net.minecraft.server.commands.ItemCommands;
@@ -261,6 +263,17 @@ public class Commands {
             PublishCommand.register(this.dispatcher);
         }
 
+        // Moose start - Special boolean to track command block allowed commands (allowed to be ran by command blocks and click events).
+        for (CommandNode<CommandSourceStack> node : this.dispatcher.getRoot().getChildren()) {
+            String cmd = node.getName();
+            if (!MooseConfig.blacklistedVanillaCommands.contains(cmd)) {
+                node.commandBlockAllowed = true;
+            }
+
+//            this.vanillaCommandNodes.add(node);
+        }
+        // Moose end
+
         // Paper start - Vanilla command permission fixes
         for (final CommandNode<CommandSourceStack> node : this.dispatcher.getRoot().getChildren()) {
             if (node.getRequirement() == com.mojang.brigadier.builder.ArgumentBuilder.<CommandSourceStack>defaultRequirement()) {
@@ -351,13 +364,21 @@ public class Commands {
         ContextChain contextchain = this.finishParsing(parseresults, s, commandlistenerwrapper, label); // CraftBukkit // Paper - Add UnknownCommandEvent
 
         try {
+            // Moose start - Command block whitelist
+            if (parseresults.getContext().getSource().source instanceof BaseCommandBlock) {
+                if (!parseresults.getContext().getNodes().get(0).getNode().commandBlockAllowed) {
+                    throw new Exception("Non-vanilla commands cannot be executed in command blocks.");
+                }
+            }
+            // Moose end
+
             if (contextchain != null) {
                 Commands.executeCommandInContext(commandlistenerwrapper, (executioncontext) -> {
                     ExecutionContext.queueInitialCommandExecution(executioncontext, s, contextchain, commandlistenerwrapper, CommandResultCallback.EMPTY);
                 });
             }
         } catch (Exception exception) {
-            if (throwCommandError) throw exception;
+            if (throwCommandError) throw new RuntimeException(exception);
             MutableComponent ichatmutablecomponent = Component.literal(exception.getMessage() == null ? exception.getClass().getName() : exception.getMessage());
 
             Commands.LOGGER.error("Command exception: /{}", s, exception); // Paper - always show execution exception in console log
