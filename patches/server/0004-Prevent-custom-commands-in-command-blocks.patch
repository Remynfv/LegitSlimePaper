From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Legitimoose <legitimoose@gmail.com>
Date: Wed, 17 Jan 2024 17:50:08 -0800
Subject: [PATCH] Prevent custom commands in command blocks

Add a new commandBlockAllowed boolean to command nodes. This is set when commands are first registered. Currently no way
to set this later on.
When server commands are dispatched, check if running in a command block,
and if it's not vanilla, act like it's not a valid command.

diff --git a/src/main/java/com/mojang/brigadier/tree/CommandNode.java b/src/main/java/com/mojang/brigadier/tree/CommandNode.java
index 03ce8a2abb6dceaa922dcce7f3adbc228bbde4bc..89602810e919a92fa7e771c1b443605afaa0c82d 100644
--- a/src/main/java/com/mojang/brigadier/tree/CommandNode.java
+++ b/src/main/java/com/mojang/brigadier/tree/CommandNode.java
@@ -44,6 +44,7 @@ public abstract class CommandNode<S> implements Comparable<CommandNode<S>> {
         this.arguments.remove(name);
     }
     // CraftBukkit end
+    public Boolean commandBlockAllowed = false; // Moose
 
     protected CommandNode(final Command<S> command, final Predicate<S> requirement, final CommandNode<S> redirect, final RedirectModifier<S> modifier, final boolean forks) {
         this.command = command;
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index 24086a82e1687cb1925398218b18c2384fa8f6e3..476914d5448799c5174956e0b8b4b534af235862 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -1,6 +1,7 @@
 package net.minecraft.commands;
 
 import com.google.common.collect.Maps;
+import com.legitimoose.lsp.MooseConfig; // Moose
 import com.mojang.brigadier.ParseResults;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.arguments.ArgumentType;
@@ -134,6 +135,7 @@ import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.tags.TagKey;
 import net.minecraft.util.profiling.jfr.JvmProfiler;
 import net.minecraft.world.level.GameRules;
+import net.minecraft.world.level.BaseCommandBlock;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -258,6 +260,18 @@ public class Commands {
             PublishCommand.register(this.dispatcher);
         }
 
+//        this.vanillaCommandNodes.addAll(this.dispatcher.getRoot().getChildren()); // Paper
+        // Moose start - Special boolean to track command block allowed commands (allowed to be ran by command blocks and click events).
+        for (CommandNode<CommandSourceStack> node : this.dispatcher.getRoot().getChildren()) {
+            String cmd = node.getName();
+            if (!MooseConfig.blacklistedVanillaCommands.contains(cmd)) {
+                node.commandBlockAllowed = true;
+            }
+
+//            this.vanillaCommandNodes.add(node);
+        }
+        // Moose end
+
         // Paper start - Vanilla command permission fixes
         for (final CommandNode<CommandSourceStack> node : this.dispatcher.getRoot().getChildren()) {
             if (node.getRequirement() == com.mojang.brigadier.builder.ArgumentBuilder.<CommandSourceStack>defaultRequirement()) {
@@ -345,13 +359,21 @@ public class Commands {
         ContextChain contextchain = this.finishParsing(parseresults, s, commandlistenerwrapper, label); // CraftBukkit // Paper - Add UnknownCommandEvent
 
         try {
+            // Moose start - Command block whitelist
+            if (parseresults.getContext().getSource().source instanceof BaseCommandBlock) {
+                if (!parseresults.getContext().getNodes().get(0).getNode().commandBlockAllowed) {
+                    throw new Exception("Non-vanilla commands cannot be executed in command blocks.");
+                }
+            }
+            // Moose end
+
             if (contextchain != null) {
                 Commands.executeCommandInContext(commandlistenerwrapper, (executioncontext) -> {
                     ExecutionContext.queueInitialCommandExecution(executioncontext, s, contextchain, commandlistenerwrapper, CommandResultCallback.EMPTY);
                 });
             }
         } catch (Exception exception) {
-            if (throwCommandError) throw exception;
+            if (throwCommandError) throw new RuntimeException(exception);
             MutableComponent ichatmutablecomponent = Component.literal(exception.getMessage() == null ? exception.getClass().getName() : exception.getMessage());
 
             if (commandlistenerwrapper.getServer().isDebugging() || Commands.LOGGER.isDebugEnabled()) { // Paper - Debugging
