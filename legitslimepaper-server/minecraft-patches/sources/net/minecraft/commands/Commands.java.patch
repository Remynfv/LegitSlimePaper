--- a/net/minecraft/commands/Commands.java
+++ b/net/minecraft/commands/Commands.java
@@ -9,16 +_,15 @@
 import com.mojang.brigadier.builder.RequiredArgumentBuilder;
 import com.mojang.brigadier.context.CommandContextBuilder;
 import com.mojang.brigadier.context.ContextChain;
+import com.mojang.brigadier.context.ParsedCommandNode;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.brigadier.suggestion.SuggestionProvider;
 import com.mojang.brigadier.tree.ArgumentCommandNode;
 import com.mojang.brigadier.tree.CommandNode;
 import com.mojang.brigadier.tree.RootCommandNode;
 import com.mojang.logging.LogUtils;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Optional;
-import java.util.Set;
+
+import java.util.*;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.function.UnaryOperator;
@@ -40,7 +_,6 @@
 import net.minecraft.network.chat.ClickEvent;
 import net.minecraft.network.chat.CommonComponents;
 import net.minecraft.network.chat.Component;
-import net.minecraft.network.chat.ComponentUtils;
 import net.minecraft.network.chat.HoverEvent;
 import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.protocol.game.ClientboundCommandsPacket;
@@ -143,6 +_,7 @@
 import net.minecraft.util.profiling.jfr.JvmProfiler;
 import net.minecraft.world.flag.FeatureFlagSet;
 import net.minecraft.world.flag.FeatureFlags;
+import net.minecraft.world.level.BaseCommandBlock;
 import net.minecraft.world.level.GameRules;
 import org.slf4j.Logger;
 
@@ -175,6 +_,7 @@
         }
     };
     private final CommandDispatcher<CommandSourceStack> dispatcher = new CommandDispatcher<>();
+    public static CommandDispatcher<CommandSourceStack> vanillaCommands = new CommandDispatcher<>(); // Moose
 
     public Commands(Commands.CommandSelection selection, CommandBuildContext context) {
     // Paper start - Brigadier API - modern minecraft overloads that do not use redirects but are copies instead
@@ -286,6 +_,25 @@
             PublishCommand.register(this.dispatcher);
         }
 
+        // Moose start - Special boolean to track command block allowed commands (allowed to be ran by command blocks and click events).
+        for (CommandNode<CommandSourceStack> node : this.dispatcher.getRoot().getChildren()) {
+            String cmd = node.getName();
+            if (!com.legitimoose.lsp.MooseConfig.blacklistedVanillaCommands.contains(cmd)) {
+                    node.commandBlockAllowed = true;
+            }
+            //this.vanillaCommandNodes.add(node);
+        }
+        // Moose end
+        // Moose start - Copy all the vanilla commands into a new root for use in /execute. Prevents plugin commands being run.
+        vanillaCommands.getRoot().clearAll(); // Moose - Allow reloading of RessourceOrId arguments (like in /loot command)
+        for (CommandNode<CommandSourceStack> node : this.dispatcher.getRoot().getChildren()) {
+            if (!node.commandBlockAllowed) {
+                continue;
+            }
+            vanillaCommands.getRoot().addChild(node);
+        }
+        // Moose end
+
         // Paper start - Vanilla command permission fixes
         for (final CommandNode<CommandSourceStack> node : this.dispatcher.getRoot().getChildren()) {
             if (node.getRequirement() == com.mojang.brigadier.builder.ArgumentBuilder.<CommandSourceStack>defaultRequirement()) {
@@ -353,6 +_,15 @@
         ContextChain<CommandSourceStack> contextChain = finishParsing(parseResults, command, commandSourceStack);
 
         try {
+            // Moose start - Command block whitelist
+            if (parseResults.getContext().getSource().source instanceof BaseCommandBlock) {
+                List<ParsedCommandNode<CommandSourceStack>> context = parseResults.getContext().getNodes();
+                if (!context.isEmpty() && !context.getFirst().getNode().commandBlockAllowed) {
+                    throw new Exception("Non-vanilla commands cannot be executed in command blocks.");
+                }
+            }
+            // Moose end
+
             if (contextChain != null) {
                 executeCommandInContext(
                     commandSourceStack,
@@ -363,7 +_,7 @@
             }
             // Paper start
         } catch (Throwable var12) { // always gracefully handle it, no matter how bad:tm:
-            if (throwCommandError) throw var12; // rethrow directly if requested
+            if (throwCommandError) throw new RuntimeException(var12); // Paper + Moose
             // Paper end
             MutableComponent mutableComponent = Component.literal(var12.getMessage() == null ? var12.getClass().getName() : var12.getMessage());
             LOGGER.error("Command exception: /{}", command, var12); // Paper - always show execution exception in console log
@@ -494,12 +_,27 @@
         for (CommandNode node : rootCommandNode.getChildren()) {
             bukkit.add(node.getName());
         }
+
         // Paper start - Perf: Async command map building
         new com.destroystokyo.paper.event.brigadier.AsyncPlayerSendCommandsEvent<CommandSourceStack>(player.getBukkitEntity(), (RootCommandNode) rootCommandNode, false).callEvent(); // Paper - Brigadier API
         net.minecraft.server.MinecraftServer.getServer().execute(() -> {
             runSync(player, bukkit, rootCommandNode);
         });
     }
+    // Moose start - Make sure non-vanilla commands are restricted
+    static class SpecialPermissionCheck implements Predicate<CommandSourceStack>, PermissionSource.RestrictedMarker {
+        private final Predicate<CommandSourceStack> originalRequirement;
+
+        public SpecialPermissionCheck(Predicate<CommandSourceStack> originalRequirement) {
+            this.originalRequirement = originalRequirement;
+        }
+
+        @Override
+        public boolean test(CommandSourceStack commandSourceStack) {
+            return originalRequirement.test(commandSourceStack);
+        }
+    }
+    // Moose end
 
     private void runSync(ServerPlayer player, java.util.Collection<String> bukkit, RootCommandNode<CommandSourceStack> rootCommandNode) {
         // Paper end - Perf: Async command map building
@@ -514,6 +_,15 @@
             }
         }
         // CraftBukkit end
+
+        // Moose start - Make sure non-vanilla commands are restricted
+        // Put here since some events might change requirements and all
+        rootCommandNode.getChildren().forEach(commandNode -> {
+            if (vanillaCommands.getRoot().getChild(commandNode.getName()) == null && !(commandNode.requirement instanceof SpecialPermissionCheck)) {
+                commandNode.requirement = new SpecialPermissionCheck(commandNode.requirement);
+            }
+        });
+        // Moose end
         player.connection.send(new ClientboundCommandsPacket(rootCommandNode, COMMAND_NODE_INSPECTOR));
     }
 
